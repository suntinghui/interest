{"remainingRequest":"E:\\workspace\\javaEE\\interest\\interest-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\workspace\\javaEE\\interest\\interest-web\\src\\views\\sys\\interest\\interest-quill-editor.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\workspace\\javaEE\\interest\\interest-web\\src\\views\\sys\\interest\\interest-quill-editor.vue","mtime":1568861049932},{"path":"E:\\workspace\\javaEE\\interest\\interest-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\workspace\\javaEE\\interest\\interest-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\workspace\\javaEE\\interest\\interest-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import VueQuillEditor, { Quill } from 'vue-quill-editor';\n  import  ImageResize  from 'quill-image-resize-module';\n  // import { ImageDrop } from 'quill-image-drop-module';\n  //import Quill from 'quill';\n  // Quill.register('modules/imageDrop', ImageDrop);\n  Quill.register('modules/imageResize', ImageResize);\n  // 工具栏配置\n  const toolbarOptions = [\n    ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\n    ['blockquote', 'code-block'],\n\n    [{'header': 1}, {'header': 2}],               // custom button values\n    [{'list': 'ordered'}, {'list': 'bullet'}],\n    [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\n    [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\n    [{'direction': 'rtl'}],                         // text direction\n\n    [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\n    [{'header': [1, 2, 3, 4, 5, 6, false]}],\n\n    [{'color': []}, {'background': []}],          // dropdown with defaults from theme\n    [{'font': []}],\n    [{'align': []}],\n    ['link', 'image', 'video'],\n    ['clean']                                         // remove formatting button\n  ]\nexport default {\n      props: ['interestContent'],\n      watch: {\n          interestContent: function(newQuestion, oldQuestion) {\n            // console.log(newQuestion);\n            this.setContent(newQuestion);\n            //this.content = newQuestion+'';\n          }\n      },\n      data () {\n          return {\n              content:\"\",\n              editorOption:{},\n              headers:{\n                  Authorization:'bearer '+ localStorage.getItem(\"currentUser_token\")\n              },\n              editorOption: {\n                  placeholder: '',\n                  theme: 'snow',  // or 'bubble'\n                  modules: {\n                      toolbar: {\n                          container: toolbarOptions,  // 工具栏\n                          handlers: {\n                              'image': function (value) {\n                                  if (value) {\n                                      document.querySelector('#interest-editor Button').click()\n                                  } else {\n                                      this.quill.format('image', false);\n                                  }\n                              }.bind(this)\n                          }\n                      },\n                      // imageDrop: true,\n                      imageResize: {\n                          displayStyles: {\n                              backgroundColor: 'black',\n                              border: 'none',\n                              color: 'white'\n                          },\n                          displaySize: true\n                      }\n                  }\n              }\n          }\n      },\n      mounted(){\n      },\n      methods:{\n          setContent(innerHTML) {\n            setTimeout(() => {\n              let quill = this.$refs.myQuillEditor.quill;\n              quill.container.querySelector('.ql-editor').innerHTML = innerHTML;\n            })\n          },\n          getContent(){\n            let quill = this.$refs.myQuillEditor.quill;\n            return quill.container.querySelector('.ql-editor').innerHTML;\n          },\n          handleSuccess (res, file) {\n              // 获取富文本组件实例\n              let quill = this.$refs.myQuillEditor.quill;\n              // 获取光标所在位置\n              let length = quill.getSelection().index;\n              // 插入图片  res.info为服务器返回的图片地址\n              quill.insertEmbed(length, 'image', res.data);\n              // 调整光标到最后\n              //quill.setSelection(length + 1)\n          },\n          handleBeforeUpload () {\n              this.$refs.upload.fileList.splice(0, this.$refs.upload.fileList.length);\n              return true;\n          },\n          handleFormatError (file) {\n              this.$Notice.warning({\n                  title: '图片格式不对',\n                  desc: '图片格式只能为jpg,jpeg,png'\n              });\n          },\n          handleMaxSize (file) {\n              this.$Notice.warning({\n                  title: '图片太大',\n                  desc: '上传图片最大为1M,请优化后在上传。可使用https://zhitu.isux.us/网站优化'\n              });\n          },\n          onEditorBlur(){//失去焦点事件\n            this.$emit('editor-change',this.content);\n          },\n          onEditorFocus(){//获得焦点事件\n            this.$emit('editor-change',this.content);\n          },\n          onEditorChange(){//内容改变事件\n            this.$emit('editor-change',this.content);\n          },\n          \n      }\n  }\n",{"version":3,"sources":["interest-quill-editor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"interest-quill-editor.vue","sourceRoot":"src/views/sys/interest","sourcesContent":["<style type=\"text/css\">\r\n</style>\r\n<template>\r\n  <div>\r\n    <Upload \r\n      v-show=\"false\"\r\n            id=\"interest-editor\"\r\n            ref=\"upload\"\r\n            :headers=\"headers\"\r\n            action=\"/interest/upload/picture\"\r\n            name=\"picture\"\r\n            :show-upload-list=\"false\"\r\n            :before-upload=\"handleBeforeUpload\"\r\n            :on-success=\"handleSuccess\"\r\n            :on-format-error=\"handleFormatError\"\r\n            :format=\"['jpg','jpeg','png']\"\r\n            :max-size=\"1024\"\r\n            :on-exceeded-size=\"handleMaxSize\">\r\n            <Button icon=\"ios-cloud-upload-outline\">上传图片</Button>\r\n        </Upload>\r\n        <quill-editor\r\n          v-model=\"content\" \r\n          ref=\"myQuillEditor\" \r\n          :options=\"editorOption\" \r\n          @blur=\"onEditorBlur($event)\" \r\n          @focus=\"onEditorFocus($event)\"\r\n          @change=\"onEditorChange($event)\">\r\n        </quill-editor>\r\n    </div>\r\n</template>\r\n<script>\r\n    import VueQuillEditor, { Quill } from 'vue-quill-editor';\r\n    import  ImageResize  from 'quill-image-resize-module';\r\n    // import { ImageDrop } from 'quill-image-drop-module';\r\n    //import Quill from 'quill';\r\n    // Quill.register('modules/imageDrop', ImageDrop);\r\n    Quill.register('modules/imageResize', ImageResize);\r\n    // 工具栏配置\r\n    const toolbarOptions = [\r\n      ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n      ['blockquote', 'code-block'],\r\n\r\n      [{'header': 1}, {'header': 2}],               // custom button values\r\n      [{'list': 'ordered'}, {'list': 'bullet'}],\r\n      [{'script': 'sub'}, {'script': 'super'}],      // superscript/subscript\r\n      [{'indent': '-1'}, {'indent': '+1'}],          // outdent/indent\r\n      [{'direction': 'rtl'}],                         // text direction\r\n\r\n      [{'size': ['small', false, 'large', 'huge']}],  // custom dropdown\r\n      [{'header': [1, 2, 3, 4, 5, 6, false]}],\r\n\r\n      [{'color': []}, {'background': []}],          // dropdown with defaults from theme\r\n      [{'font': []}],\r\n      [{'align': []}],\r\n      ['link', 'image', 'video'],\r\n      ['clean']                                         // remove formatting button\r\n    ]\r\n  export default {\r\n        props: ['interestContent'],\r\n        watch: {\r\n            interestContent: function(newQuestion, oldQuestion) {\r\n              // console.log(newQuestion);\r\n              this.setContent(newQuestion);\r\n              //this.content = newQuestion+'';\r\n            }\r\n        },\r\n        data () {\r\n            return {\r\n                content:\"\",\r\n                editorOption:{},\r\n                headers:{\r\n                    Authorization:'bearer '+ localStorage.getItem(\"currentUser_token\")\r\n                },\r\n                editorOption: {\r\n                    placeholder: '',\r\n                    theme: 'snow',  // or 'bubble'\r\n                    modules: {\r\n                        toolbar: {\r\n                            container: toolbarOptions,  // 工具栏\r\n                            handlers: {\r\n                                'image': function (value) {\r\n                                    if (value) {\r\n                                        document.querySelector('#interest-editor Button').click()\r\n                                    } else {\r\n                                        this.quill.format('image', false);\r\n                                    }\r\n                                }.bind(this)\r\n                            }\r\n                        },\r\n                        // imageDrop: true,\r\n                        imageResize: {\r\n                            displayStyles: {\r\n                                backgroundColor: 'black',\r\n                                border: 'none',\r\n                                color: 'white'\r\n                            },\r\n                            displaySize: true\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        mounted(){\r\n        },\r\n        methods:{\r\n            setContent(innerHTML) {\r\n              setTimeout(() => {\r\n                let quill = this.$refs.myQuillEditor.quill;\r\n                quill.container.querySelector('.ql-editor').innerHTML = innerHTML;\r\n              })\r\n            },\r\n            getContent(){\r\n              let quill = this.$refs.myQuillEditor.quill;\r\n              return quill.container.querySelector('.ql-editor').innerHTML;\r\n            },\r\n            handleSuccess (res, file) {\r\n                // 获取富文本组件实例\r\n                let quill = this.$refs.myQuillEditor.quill;\r\n                // 获取光标所在位置\r\n                let length = quill.getSelection().index;\r\n                // 插入图片  res.info为服务器返回的图片地址\r\n                quill.insertEmbed(length, 'image', res.data);\r\n                // 调整光标到最后\r\n                //quill.setSelection(length + 1)\r\n            },\r\n            handleBeforeUpload () {\r\n                this.$refs.upload.fileList.splice(0, this.$refs.upload.fileList.length);\r\n                return true;\r\n            },\r\n            handleFormatError (file) {\r\n                this.$Notice.warning({\r\n                    title: '图片格式不对',\r\n                    desc: '图片格式只能为jpg,jpeg,png'\r\n                });\r\n            },\r\n            handleMaxSize (file) {\r\n                this.$Notice.warning({\r\n                    title: '图片太大',\r\n                    desc: '上传图片最大为1M,请优化后在上传。可使用https://zhitu.isux.us/网站优化'\r\n                });\r\n            },\r\n            onEditorBlur(){//失去焦点事件\r\n              this.$emit('editor-change',this.content);\r\n            },\r\n            onEditorFocus(){//获得焦点事件\r\n              this.$emit('editor-change',this.content);\r\n            },\r\n            onEditorChange(){//内容改变事件\r\n              this.$emit('editor-change',this.content);\r\n            },\r\n            \r\n        }\r\n    }\r\n</script>"]}]}